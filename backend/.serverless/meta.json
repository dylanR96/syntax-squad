{
  "C:\\Users\\aintf\\Documents\\Github-repositories\\syntax-squad-main\\backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.12",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "org": "dylanr96",
            "service": "syntax-squad",
            "provider": {
              "name": "aws",
              "runtime": "nodejs20.x",
              "region": "eu-north-1",
              "httpApi": {
                "cors": true
              },
              "iam": {
                "role": {
                  "statements": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:DeleteItem",
                        "dynamodb:BatchGetItem"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "CreateAdminLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-createAdmin"
                    }
                  },
                  "GetAdminLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-getAdmin"
                    }
                  },
                  "CreateCustomerLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-createCustomer"
                    }
                  },
                  "GetCustomersLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-getCustomers"
                    }
                  },
                  "AddIngredientLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-addIngredient"
                    }
                  },
                  "DeleteIngredientLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-deleteIngredient"
                    }
                  },
                  "EditIngredientLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-editIngredient"
                    }
                  },
                  "GetIngredientsByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-getIngredientsById"
                    }
                  },
                  "GetAllIngredientsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-getAllIngredients"
                    }
                  },
                  "GetAllProductsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-getAllProducts"
                    }
                  },
                  "CreateProductLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/syntax-squad-dev-createProduct"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "syntax-squad",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/syntax-squad-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/syntax-squad-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "dynamodb:Query",
                                  "dynamodb:Scan",
                                  "dynamodb:GetItem",
                                  "dynamodb:PutItem",
                                  "dynamodb:UpdateItem",
                                  "dynamodb:DeleteItem",
                                  "dynamodb:BatchGetItem"
                                ],
                                "Resource": "*"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "syntax-squad",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateAdminLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/adminHandler.createAdmin",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-createAdmin",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateAdminLogGroup"
                    ]
                  },
                  "GetAdminLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/adminHandler.getAdmin",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-getAdmin",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAdminLogGroup"
                    ]
                  },
                  "CreateCustomerLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/customerHandler.createCustomer",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-createCustomer",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateCustomerLogGroup"
                    ]
                  },
                  "GetCustomersLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/customerHandler.getCustomers",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-getCustomers",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetCustomersLogGroup"
                    ]
                  },
                  "AddIngredientLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/ingredientHandler.addIngredient",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-addIngredient",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AddIngredientLogGroup"
                    ]
                  },
                  "DeleteIngredientLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/ingredientHandler.deleteIngredient",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-deleteIngredient",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "DeleteIngredientLogGroup"
                    ]
                  },
                  "EditIngredientLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/ingredientHandler.editIngredient",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-editIngredient",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "EditIngredientLogGroup"
                    ]
                  },
                  "GetIngredientsByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/ingredientHandler.getIngredientsByIds",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-getIngredientsById",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetIngredientsByIdLogGroup"
                    ]
                  },
                  "GetAllIngredientsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/ingredientHandler.getAllIngredients",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-getAllIngredients",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllIngredientsLogGroup"
                    ]
                  },
                  "GetAllProductsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/productHandler.getAllProducts",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-getAllProducts",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllProductsLogGroup"
                    ]
                  },
                  "CreateProductLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                        "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                      },
                      "Handler": "src/handlers/productHandler.createProduct",
                      "Runtime": "nodejs20.x",
                      "FunctionName": "syntax-squad-dev-createProduct",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateProductLogGroup"
                    ]
                  },
                  "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateAdminLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAdminLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateCustomerLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetCustomersLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AddIngredientLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "DeleteIngredientLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "EditIngredientLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetIngredientsByIdLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllIngredientsLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllProductsLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateProductLambdaFunction"
                      },
                      "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
                    }
                  },
                  "HttpApi": {
                    "Type": "AWS::ApiGatewayV2::Api",
                    "Properties": {
                      "Name": "dev-syntax-squad",
                      "ProtocolType": "HTTP",
                      "CorsConfiguration": {
                        "AllowCredentials": "<REDACTED>",
                        "AllowHeaders": [
                          "Content-Type",
                          "X-Amz-Date",
                          "Authorization",
                          "X-Api-Key",
                          "X-Amz-Security-Token",
                          "X-Amz-User-Agent",
                          "X-Amzn-Trace-Id"
                        ],
                        "AllowMethods": [
                          "OPTIONS",
                          "POST",
                          "GET",
                          "DELETE",
                          "PUT"
                        ],
                        "AllowOrigins": [
                          "*"
                        ]
                      }
                    }
                  },
                  "HttpApiStage": {
                    "Type": "AWS::ApiGatewayV2::Stage",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "StageName": "$default",
                      "AutoDeploy": true,
                      "DefaultRouteSettings": {
                        "DetailedMetricsEnabled": false
                      }
                    }
                  },
                  "CreateAdminLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationCreateAdmin": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "CreateAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostAdmin": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /admin",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationCreateAdmin"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationCreateAdmin"
                  },
                  "GetAdminLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetAdmin": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetAdminLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetAdminAdminidVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /admin/{adminID}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetAdmin"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetAdmin"
                  },
                  "CreateCustomerLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationCreateCustomer": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "CreateCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostCustomer": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /customer",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationCreateCustomer"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationCreateCustomer"
                  },
                  "GetCustomersLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetCustomersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetCustomers": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetCustomersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetCustomers": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /customers",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetCustomers"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetCustomers"
                  },
                  "AddIngredientLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AddIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationAddIngredient": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "AddIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostIngredient": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /ingredient",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationAddIngredient"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationAddIngredient"
                  },
                  "DeleteIngredientLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "DeleteIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationDeleteIngredient": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "DeleteIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteDeleteIngredient": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "DELETE /ingredient",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationDeleteIngredient"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationDeleteIngredient"
                  },
                  "EditIngredientLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "EditIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationEditIngredient": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "EditIngredientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePutIngredient": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "PUT /ingredient",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationEditIngredient"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationEditIngredient"
                  },
                  "GetIngredientsByIdLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetIngredientsByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetIngredientsById": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetIngredientsByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostIngredientsbyid": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /ingredientsById",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetIngredientsById"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetIngredientsById"
                  },
                  "GetAllIngredientsLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllIngredientsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetAllIngredients": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetAllIngredientsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetIngredients": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /ingredients",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetAllIngredients"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetAllIngredients"
                  },
                  "GetAllProductsLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationGetAllProducts": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "GetAllProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRouteGetProducts": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /products",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationGetAllProducts"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationGetAllProducts"
                  },
                  "CreateProductLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationCreateProduct": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostProduct": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /product",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationCreateProduct"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationCreateProduct"
                  },
                  "AdminTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_admins",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "adminID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "adminID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "CustomerTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_customers",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "customerID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "customerID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "InfoTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_info",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "shopID",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "shopID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "ProductsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_products",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "productID",
                          "AttributeType": "N"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "productID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "IngredientsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_ingredients",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "ingredientID",
                          "AttributeType": "N"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "ingredientID",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "OrdersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "easybake_orders",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "orderNO",
                          "AttributeType": "N"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "orderNO",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                    "Export": {
                      "Name": "sls-syntax-squad-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CreateAdminLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-CreateAdminLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAdminLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-GetAdminLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateCustomerLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-CreateCustomerLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetCustomersLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-GetCustomersLambdaFunctionQualifiedArn"
                    }
                  },
                  "AddIngredientLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-AddIngredientLambdaFunctionQualifiedArn"
                    }
                  },
                  "DeleteIngredientLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-DeleteIngredientLambdaFunctionQualifiedArn"
                    }
                  },
                  "EditIngredientLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-EditIngredientLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetIngredientsByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-GetIngredientsByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllIngredientsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-GetAllIngredientsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetAllProductsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-GetAllProductsLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateProductLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-CreateProductLambdaFunctionQualifiedArn"
                    }
                  },
                  "HttpApiId": {
                    "Description": "Id of the HTTP API",
                    "Value": {
                      "Ref": "HttpApi"
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-HttpApiId"
                    }
                  },
                  "HttpApiUrl": {
                    "Description": "URL of the HTTP API",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "HttpApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          }
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-syntax-squad-dev-HttpApiUrl"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "createAdmin": {
                "handler": "src/handlers/adminHandler.createAdmin",
                "events": [
                  {
                    "httpApi": {
                      "path": "/admin",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/admin"
                  }
                ],
                "name": "syntax-squad-dev-createAdmin",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg"
              },
              "getAdmin": {
                "handler": "src/handlers/adminHandler.getAdmin",
                "events": [
                  {
                    "httpApi": {
                      "path": "/admin/{adminID}",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/admin/{adminID}"
                  }
                ],
                "name": "syntax-squad-dev-getAdmin",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA"
              },
              "createCustomer": {
                "handler": "src/handlers/customerHandler.createCustomer",
                "events": [
                  {
                    "httpApi": {
                      "path": "/customer",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/customer"
                  }
                ],
                "name": "syntax-squad-dev-createCustomer",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80"
              },
              "getCustomers": {
                "handler": "src/handlers/customerHandler.getCustomers",
                "events": [
                  {
                    "httpApi": {
                      "path": "/customers",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/customers"
                  }
                ],
                "name": "syntax-squad-dev-getCustomers",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA"
              },
              "addIngredient": {
                "handler": "src/handlers/ingredientHandler.addIngredient",
                "events": [
                  {
                    "httpApi": {
                      "path": "/ingredient",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/ingredient"
                  }
                ],
                "name": "syntax-squad-dev-addIngredient",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY"
              },
              "deleteIngredient": {
                "handler": "src/handlers/ingredientHandler.deleteIngredient",
                "events": [
                  {
                    "httpApi": {
                      "path": "/ingredient",
                      "method": "DELETE"
                    },
                    "resolvedMethod": "DELETE",
                    "resolvedPath": "/ingredient"
                  }
                ],
                "name": "syntax-squad-dev-deleteIngredient",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g"
              },
              "editIngredient": {
                "handler": "src/handlers/ingredientHandler.editIngredient",
                "events": [
                  {
                    "httpApi": {
                      "path": "/ingredient",
                      "method": "PUT"
                    },
                    "resolvedMethod": "PUT",
                    "resolvedPath": "/ingredient"
                  }
                ],
                "name": "syntax-squad-dev-editIngredient",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM"
              },
              "getIngredientsById": {
                "handler": "src/handlers/ingredientHandler.getIngredientsByIds",
                "events": [
                  {
                    "httpApi": {
                      "path": "/ingredientsById",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/ingredientsById"
                  }
                ],
                "name": "syntax-squad-dev-getIngredientsById",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc"
              },
              "getAllIngredients": {
                "handler": "src/handlers/ingredientHandler.getAllIngredients",
                "events": [
                  {
                    "httpApi": {
                      "path": "/ingredients",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/ingredients"
                  }
                ],
                "name": "syntax-squad-dev-getAllIngredients",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM"
              },
              "getAllProducts": {
                "handler": "src/handlers/productHandler.getAllProducts",
                "events": [
                  {
                    "httpApi": {
                      "path": "/products",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/products"
                  }
                ],
                "name": "syntax-squad-dev-getAllProducts",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI"
              },
              "createProduct": {
                "handler": "src/handlers/productHandler.createProduct",
                "events": [
                  {
                    "httpApi": {
                      "path": "/product",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/product"
                  }
                ],
                "name": "syntax-squad-dev-createProduct",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs20.x",
                "vpc": {},
                "versionLogicalId": "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE"
              }
            },
            "resources": {
              "Resources": {
                "AdminTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_admins",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "adminID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "adminID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "CustomerTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_customers",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "customerID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "customerID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "InfoTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_info",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "shopID",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "shopID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "ProductsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_products",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "productID",
                        "AttributeType": "N"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "productID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "IngredientsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_ingredients",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "ingredientID",
                        "AttributeType": "N"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "ingredientID",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "OrdersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "easybake_orders",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "orderNO",
                        "AttributeType": "N"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "orderNO",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\aintf\\Documents\\Github-repositories\\syntax-squad-main\\backend",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\aintf\\Documents\\Github-repositories\\syntax-squad-main\\backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "dylanr96",
      "service": "syntax-squad",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "eu-north-1",
        "httpApi": {
          "cors": true
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem",
                  "dynamodb:BatchGetItem"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateAdminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-createAdmin"
              }
            },
            "GetAdminLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-getAdmin"
              }
            },
            "CreateCustomerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-createCustomer"
              }
            },
            "GetCustomersLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-getCustomers"
              }
            },
            "AddIngredientLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-addIngredient"
              }
            },
            "DeleteIngredientLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-deleteIngredient"
              }
            },
            "EditIngredientLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-editIngredient"
              }
            },
            "GetIngredientsByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-getIngredientsById"
              }
            },
            "GetAllIngredientsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-getAllIngredients"
              }
            },
            "GetAllProductsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-getAllProducts"
              }
            },
            "CreateProductLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/syntax-squad-dev-createProduct"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "syntax-squad",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/syntax-squad-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/syntax-squad-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem",
                            "dynamodb:BatchGetItem"
                          ],
                          "Resource": "*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "syntax-squad",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateAdminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/adminHandler.createAdmin",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-createAdmin",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateAdminLogGroup"
              ]
            },
            "GetAdminLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/adminHandler.getAdmin",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-getAdmin",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAdminLogGroup"
              ]
            },
            "CreateCustomerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/customerHandler.createCustomer",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-createCustomer",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateCustomerLogGroup"
              ]
            },
            "GetCustomersLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/customerHandler.getCustomers",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-getCustomers",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetCustomersLogGroup"
              ]
            },
            "AddIngredientLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/ingredientHandler.addIngredient",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-addIngredient",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AddIngredientLogGroup"
              ]
            },
            "DeleteIngredientLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/ingredientHandler.deleteIngredient",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-deleteIngredient",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteIngredientLogGroup"
              ]
            },
            "EditIngredientLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/ingredientHandler.editIngredient",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-editIngredient",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EditIngredientLogGroup"
              ]
            },
            "GetIngredientsByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/ingredientHandler.getIngredientsByIds",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-getIngredientsById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetIngredientsByIdLogGroup"
              ]
            },
            "GetAllIngredientsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/ingredientHandler.getAllIngredients",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-getAllIngredients",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllIngredientsLogGroup"
              ]
            },
            "GetAllProductsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/productHandler.getAllProducts",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-getAllProducts",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllProductsLogGroup"
              ]
            },
            "CreateProductLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
                  "S3Key": "serverless/syntax-squad/dev/1732620804422-2024-11-26T11:33:24.422Z/syntax-squad.zip"
                },
                "Handler": "src/handlers/productHandler.createProduct",
                "Runtime": "nodejs20.x",
                "FunctionName": "syntax-squad-dev-createProduct",
                "MemorySize": 1024,
                "Timeout": 6,
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateProductLogGroup"
              ]
            },
            "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateAdminLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAdminLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateCustomerLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetCustomersLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AddIngredientLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteIngredientLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EditIngredientLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetIngredientsByIdLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllIngredientsLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllProductsLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateProductLambdaFunction"
                },
                "CodeSha256": "T4h6mWDhTh77bwVOELNYbHGlMyevllvVMduH8DA7dfE="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-syntax-squad",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "POST",
                    "GET",
                    "DELETE",
                    "PUT"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "CreateAdminLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateAdmin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAdmin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /admin",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateAdmin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateAdmin"
            },
            "GetAdminLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAdmin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAdminLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAdminAdminidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /admin/{adminID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAdmin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAdmin"
            },
            "CreateCustomerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateCustomer": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateCustomerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCustomer": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /customer",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateCustomer"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateCustomer"
            },
            "GetCustomersLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetCustomersLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetCustomers": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetCustomersLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetCustomers": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /customers",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetCustomers"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetCustomers"
            },
            "AddIngredientLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AddIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAddIngredient": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AddIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostIngredient": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /ingredient",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAddIngredient"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAddIngredient"
            },
            "DeleteIngredientLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteIngredient": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteIngredient": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /ingredient",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteIngredient"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteIngredient"
            },
            "EditIngredientLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EditIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEditIngredient": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EditIngredientLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePutIngredient": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /ingredient",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEditIngredient"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEditIngredient"
            },
            "GetIngredientsByIdLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetIngredientsByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetIngredientsById": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetIngredientsByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostIngredientsbyid": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /ingredientsById",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetIngredientsById"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetIngredientsById"
            },
            "GetAllIngredientsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllIngredientsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllIngredients": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllIngredientsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetIngredients": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /ingredients",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllIngredients"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllIngredients"
            },
            "GetAllProductsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllProducts": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllProductsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetProducts": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /products",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllProducts"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllProducts"
            },
            "CreateProductLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateProductLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateProduct": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateProductLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostProduct": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /product",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateProduct"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateProduct"
            },
            "AdminTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_admins",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "adminID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "adminID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "CustomerTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_customers",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "customerID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "customerID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "InfoTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_info",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "shopID",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "shopID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "ProductsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_products",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "productID",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "productID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "IngredientsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_ingredients",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "ingredientID",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "ingredientID",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "OrdersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "easybake_orders",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "orderNO",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "orderNO",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
              "Export": {
                "Name": "sls-syntax-squad-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateAdminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-CreateAdminLambdaFunctionQualifiedArn"
              }
            },
            "GetAdminLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-GetAdminLambdaFunctionQualifiedArn"
              }
            },
            "CreateCustomerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-CreateCustomerLambdaFunctionQualifiedArn"
              }
            },
            "GetCustomersLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-GetCustomersLambdaFunctionQualifiedArn"
              }
            },
            "AddIngredientLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-AddIngredientLambdaFunctionQualifiedArn"
              }
            },
            "DeleteIngredientLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-DeleteIngredientLambdaFunctionQualifiedArn"
              }
            },
            "EditIngredientLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-EditIngredientLambdaFunctionQualifiedArn"
              }
            },
            "GetIngredientsByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-GetIngredientsByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetAllIngredientsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-GetAllIngredientsLambdaFunctionQualifiedArn"
              }
            },
            "GetAllProductsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-GetAllProductsLambdaFunctionQualifiedArn"
              }
            },
            "CreateProductLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-CreateProductLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-syntax-squad-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "createAdmin": {
          "handler": "src/handlers/adminHandler.createAdmin",
          "events": [
            {
              "httpApi": {
                "path": "/admin",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/admin"
            }
          ],
          "name": "syntax-squad-dev-createAdmin",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateAdminLambdaVersionTfWGBzMtqj8Q8452GNZMP1Y03OHCfw9CcDZqET0PHg"
        },
        "getAdmin": {
          "handler": "src/handlers/adminHandler.getAdmin",
          "events": [
            {
              "httpApi": {
                "path": "/admin/{adminID}",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/admin/{adminID}"
            }
          ],
          "name": "syntax-squad-dev-getAdmin",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAdminLambdaVersionlxd1Dy8PCW0hZMg5obIGhBMhCSpqc8nLcazRc4fbA"
        },
        "createCustomer": {
          "handler": "src/handlers/customerHandler.createCustomer",
          "events": [
            {
              "httpApi": {
                "path": "/customer",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/customer"
            }
          ],
          "name": "syntax-squad-dev-createCustomer",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateCustomerLambdaVersionmZyaBpa0itWGcDyUO6NTZ6PkGK27tZaGNqlJKEr80"
        },
        "getCustomers": {
          "handler": "src/handlers/customerHandler.getCustomers",
          "events": [
            {
              "httpApi": {
                "path": "/customers",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/customers"
            }
          ],
          "name": "syntax-squad-dev-getCustomers",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetCustomersLambdaVersionNoBKJcG9AlquvjVxJWg17vdy0ksw3TkOV4wSJ72wxA"
        },
        "addIngredient": {
          "handler": "src/handlers/ingredientHandler.addIngredient",
          "events": [
            {
              "httpApi": {
                "path": "/ingredient",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/ingredient"
            }
          ],
          "name": "syntax-squad-dev-addIngredient",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AddIngredientLambdaVersionV2TURXmYy4sk94C1iLvfWRF28f9OLm7Hg9KuWrsUY"
        },
        "deleteIngredient": {
          "handler": "src/handlers/ingredientHandler.deleteIngredient",
          "events": [
            {
              "httpApi": {
                "path": "/ingredient",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/ingredient"
            }
          ],
          "name": "syntax-squad-dev-deleteIngredient",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteIngredientLambdaVersionKV3fsCktzp9ksbr0toBnzJwXuPyq6tm79A9C1WJ2g"
        },
        "editIngredient": {
          "handler": "src/handlers/ingredientHandler.editIngredient",
          "events": [
            {
              "httpApi": {
                "path": "/ingredient",
                "method": "PUT"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/ingredient"
            }
          ],
          "name": "syntax-squad-dev-editIngredient",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EditIngredientLambdaVersionvNQJ6N0FdK7l7qTmUSTDTQeVsAN6U4Z5YDz4h6nseM"
        },
        "getIngredientsById": {
          "handler": "src/handlers/ingredientHandler.getIngredientsByIds",
          "events": [
            {
              "httpApi": {
                "path": "/ingredientsById",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/ingredientsById"
            }
          ],
          "name": "syntax-squad-dev-getIngredientsById",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetIngredientsByIdLambdaVersionSr4VvztmLIy6zeCMaZo0fK28jvHYLKsvuPvP4W6Cc"
        },
        "getAllIngredients": {
          "handler": "src/handlers/ingredientHandler.getAllIngredients",
          "events": [
            {
              "httpApi": {
                "path": "/ingredients",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/ingredients"
            }
          ],
          "name": "syntax-squad-dev-getAllIngredients",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllIngredientsLambdaVersion9XVPItkoYWLAX9PzBfujLVeT664y802E2hYTD71xLM"
        },
        "getAllProducts": {
          "handler": "src/handlers/productHandler.getAllProducts",
          "events": [
            {
              "httpApi": {
                "path": "/products",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/products"
            }
          ],
          "name": "syntax-squad-dev-getAllProducts",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllProductsLambdaVersionzvFZkcUGTOVqghnKrHpSAktbz0NSvWTxLGtJ6QZ4pI"
        },
        "createProduct": {
          "handler": "src/handlers/productHandler.createProduct",
          "events": [
            {
              "httpApi": {
                "path": "/product",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/product"
            }
          ],
          "name": "syntax-squad-dev-createProduct",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateProductLambdaVersionZ5LuMduEgBrfdqXUH9d40jq7czN5ZmypuTvJyUTE"
        }
      },
      "resources": {
        "Resources": {
          "AdminTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_admins",
              "AttributeDefinitions": [
                {
                  "AttributeName": "adminID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "adminID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "CustomerTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_customers",
              "AttributeDefinitions": [
                {
                  "AttributeName": "customerID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "customerID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "InfoTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_info",
              "AttributeDefinitions": [
                {
                  "AttributeName": "shopID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "shopID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "ProductsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_products",
              "AttributeDefinitions": [
                {
                  "AttributeName": "productID",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "productID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "IngredientsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_ingredients",
              "AttributeDefinitions": [
                {
                  "AttributeName": "ingredientID",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ingredientID",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "OrdersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "easybake_orders",
              "AttributeDefinitions": [
                {
                  "AttributeName": "orderNO",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "orderNO",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: dylanr96\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: syntax-squad\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: eu-north-1\r\n  httpApi:\r\n    cors: true\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - dynamodb:Query\r\n            - dynamodb:Scan\r\n            - dynamodb:GetItem\r\n            - dynamodb:PutItem\r\n            - dynamodb:UpdateItem\r\n            - dynamodb:DeleteItem\r\n            - dynamodb:BatchGetItem\r\n          Resource: \"*\"\r\nfunctions:\r\n  # Admin\r\n  createAdmin:\r\n    handler: src/handlers/adminHandler.createAdmin\r\n    events:\r\n      - httpApi:\r\n          path: /admin\r\n          method: POST\r\n  getAdmin:\r\n    handler: src/handlers/adminHandler.getAdmin\r\n    events:\r\n      - httpApi:\r\n          path: /admin/{adminID}\r\n          method: GET\r\n  # Customers\r\n  createCustomer:\r\n    handler: src/handlers/customerHandler.createCustomer\r\n    events:\r\n      - httpApi:\r\n          path: /customer\r\n          method: POST\r\n  getCustomers:\r\n    handler: src/handlers/customerHandler.getCustomers\r\n    events:\r\n      - httpApi:\r\n          path: /customers\r\n          method: GET\r\n  # Ingredients\r\n  addIngredient:\r\n    handler: src/handlers/ingredientHandler.addIngredient\r\n    events:\r\n      - httpApi:\r\n          path: /ingredient\r\n          method: POST\r\n  deleteIngredient:\r\n    handler: src/handlers/ingredientHandler.deleteIngredient\r\n    events:\r\n      - httpApi:\r\n          path: /ingredient\r\n          method: DELETE\r\n  editIngredient:\r\n    handler: src/handlers/ingredientHandler.editIngredient\r\n    events:\r\n      - httpApi:\r\n          path: /ingredient\r\n          method: PUT\r\n  getIngredientsById:\r\n    handler: src/handlers/ingredientHandler.getIngredientsByIds\r\n    events:\r\n      - httpApi:\r\n          path: /ingredientsById\r\n          method: POST\r\n  getAllIngredients:\r\n    handler: src/handlers/ingredientHandler.getAllIngredients\r\n    events:\r\n      - httpApi:\r\n          path: /ingredients\r\n          method: GET\r\n  getAllProducts:\r\n    handler: src/handlers/productHandler.getAllProducts\r\n    events:\r\n      - httpApi:\r\n          path: /products\r\n          method: GET\r\n  createProduct:\r\n    handler: src/handlers/productHandler.createProduct\r\n    events:\r\n      - httpApi:\r\n          path: /product\r\n          method: POST\r\n\r\nresources:\r\n  Resources:\r\n    AdminTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_admins\r\n        AttributeDefinitions:\r\n          - AttributeName: adminID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: adminID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    CustomerTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_customers\r\n        AttributeDefinitions:\r\n          - AttributeName: customerID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: customerID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    InfoTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_info\r\n        AttributeDefinitions:\r\n          - AttributeName: shopID\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: shopID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    ProductsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_products\r\n        AttributeDefinitions:\r\n          - AttributeName: productID\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: productID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    IngredientsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_ingredients\r\n        AttributeDefinitions:\r\n          - AttributeName: ingredientID\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: ingredientID\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    OrdersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: easybake_orders\r\n        AttributeDefinitions:\r\n          - AttributeName: orderNO\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: orderNO\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "186217182d04cca02cfb83dde26f2744",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "6a1b92c2-adf2-48be-8931-cc6dc69070a6",
    "orgName": "dylanr96",
    "userId": "xBStRKHGYzGKWhCczX",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "dylanr96",
    "subscription": null,
    "userEmail": "dylan.ravenson@gmail.com",
    "serviceProviderAwsRegion": "eu-north-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "992382623759",
    "projectType": "traditional",
    "versionSf": "4.4.12",
    "serviceProviderAwsCfStackName": "syntax-squad-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-north-1:992382623759:stack/syntax-squad-dev/dfbfa110-ab17-11ef-9007-0a67b1f58465",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-north-1:992382623759:stack/syntax-squad-dev/dfbfa110-ab17-11ef-9007-0a67b1f58465",
    "serviceProviderAwsCfStackCreated": "2024-11-25T10:27:29.908Z",
    "serviceProviderAwsCfStackUpdated": "2024-11-26T11:33:31.174Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CreateAdminLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-createAdmin:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-CreateAdminLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllProductsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-getAllProducts:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-GetAllProductsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllIngredientsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-getAllIngredients:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-GetAllIngredientsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AddIngredientLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-addIngredient:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-AddIngredientLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateProductLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-createProduct:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-CreateProductLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "rm48l4rhzk",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-syntax-squad-dev-HttpApiId"
      },
      {
        "OutputKey": "GetAdminLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-getAdmin:12",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-GetAdminLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-north-1-e867d45f-d008",
        "ExportName": "sls-syntax-squad-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://rm48l4rhzk.execute-api.eu-north-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-syntax-squad-dev-HttpApiUrl"
      },
      {
        "OutputKey": "CreateCustomerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-createCustomer:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-CreateCustomerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetCustomersLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-getCustomers:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-GetCustomersLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetIngredientsByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-getIngredientsById:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-GetIngredientsByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteIngredientLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-deleteIngredient:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-DeleteIngredientLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EditIngredientLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:992382623759:function:syntax-squad-dev-editIngredient:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-syntax-squad-dev-EditIngredientLambdaFunctionQualifiedArn"
      }
    ]
  }
}